#pragma once
#include "../util/defines/defines.hpp"

namespace cad::enums
{
	enum class Version:uint8_t
	{
		VR12,
		V2000,
		V2004,
		V2007,
		V2010,
		V2013,
		V2018,
		Unknown
	};

	enum class BlkType :uint8_t
	{
		ModelSpace,
		PaperSpace,
		Other
	};

	enum BlockBitFlagType :util::cad_int16
	{
		None=0,
		//This is an anonymous block generated by hatching, 
		//associative dimensioning, other internaloperations, or an application
		Anonymous=1,
		//This block has non-constant attribute definitions (this bit is not set if the block 
		//has any attribute definitions that are constant, or has no attribute definitions at all)
		NonConstantAttrib=2,
		//This block is an external reference (xref)
		ExternalRef = 4,
		//This block is an xref overlay
		XRefOverlay = 8,
		//This block is externally dependent
		ExternalDependent = 16,
		//This is a resolved external reference, or dependent of an external reference (ignored on
		//input)
		ResolvedExternalRef = 32,
		//This definition is a referenced external reference (ignored on input)
		ReferencedExternalRef = 64
	};

	enum class Color :int16_t
	{
		ByBlock = -1,
		ByLayer,
		Red,
		Yellow,
		Green,
		Cyan,
		Blue,
		Magenta,
		White,
		Other
	};

	enum class LineWeight :uint8_t
	{
		ByLayer,
		ByBlock,
		Default,
		_0=0,
		_005=5,
		_009=9,
		_013=13,
		_015=15,
		_018=18,
		_020=20,
		_025=25,
		_030=30,
		_035=35,
		_040=40,
		_050=50,
		_053=53,
		_060=60,
		_070=70,
		_080=80,
		_090=90,
		_100=100,
		_106=106,
		_120=120,
		_140=140,
		_158=158,
		_200=200,
		_211=211
	};

	enum class PointStyle :uint8_t
	{
		Dot,
		Void,
		Cross,
		RotatedCross,
		Line,

		Dot_Circle,
		Void_Circle,
		Cross_Circle,
		RotatedCross_Circle,
		Line_Circle,

		Dot_Square,
		Void_Square,
		Cross_Square,
		RotatedCross_Square,
		Line_Square,

		Dot_Square_Circle,
		Void_Square_Circle,
		Cross_Square_Circle,
		RotatedCross_Square_Circle,
		Line_Square_Circle
	};

	enum class EntyType :uint8_t
	{
		_3DFace,
		_3DSolid,
		Arc,
		Attdef,
		Attrib,
		Body,
		Circle,
		Dimension,
		Ellipse,
		Hatch,
		Helix,
		Image,
		Insert,
		Leader,
		Line,
		Point,
		Polyline2D,
		Polyline3D,
		Mesh,
		Mline,
		MleaderStyle,
		Mleader,
		Mtext,
		PolyfaceMesh,
		Ray,
		Region,
		Shape,
		Solid,
		Spline,
		Surface,
		Table,
		Text,
		Trace,
		Viewport,
		Xline
	};
}